---
// Header.astro
import { menuLinks } from "@/site-config";
import LanguageSwitch from '../LanguageSwitch.astro';
import { getLangFromUrl, useTranslations } from '../../i18n/utils';
import Search from "../Search.astro";
import ThemeToggle from "../ThemeToggle.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const url = new URL(Astro.request.url);
---

<header class="group relative mb-16 flex items-center sm:ps" id="main-header">
	<div class="flex sm:flex-col">
		<a
			aria-current={url.pathname === "/" ? "page" : false}
			class="inline-flex items-center grayscale hover:filter-none sm:relative sm:inline-block mb-2"
			href={lang === 'en' ? "/" : `/${lang}/`}
		>
			<span class="text-xl font-bold sm:text-2xl">>Marin_Kresic</span>
		</a>
		<nav
	aria-label="Main menu"
	class="absolute -inset-x-4 top-14 hidden flex-col items-center justify-center gap-y-4 rounded-md bg-bgColor/[.85] py-4 text-accent shadow backdrop-blur group-[.menu-open]:z-50 group-[.menu-open]:flex sm:static sm:z-auto sm:-ms-4 sm:mt-1 sm:flex sm:flex-row sm:items-center sm:divide-x sm:divide-dashed sm:divide-accent sm:rounded-none sm:bg-transparent sm:py-0 sm:shadow-none sm:backdrop-blur-none outline outline-2 outline-accent sm:outline-none"
	id="navigation-menu"
>
	<!-- Navigation links in a row for both mobile and desktop -->
	<div class="flex flex-row items-center gap-x-4 sm:divide-x sm:divide-dashed sm:divide-accent">
		{
			menuLinks.map((link) => {
				const translatedPath = lang === 'en' ? link.path : `/${lang}${link.path}`;
				const titleKey = link.title as "nav.home" | "nav.about" | "nav.blog" | "nav.resume";
				return (
					<a
						aria-current={url.pathname === translatedPath ? "page" : false}
						class="px-4 py-4 underline-offset-2 sm:py-0 sm:hover:underline"
						data-astro-prefetch
						href={translatedPath}
					>
						{t(titleKey)}
					</a>
				)
			})
		}
	</div>

	<!-- Divider line for mobile -->
	<div class="h-px w-4/5 bg-accent/20 sm:hidden mt-4 mb-2"></div>

	<!-- Language switch section for mobile -->
	<div class="sm:hidden flex flex-col items-center gap-y-2">
		<span class="font-semibold">Language:</span>
		<div class="flex items-center gap-x-2">
			<LanguageSwitch />
		</div>
	</div>
</nav>

	</div>
	<Search />
	<ThemeToggle />
  <!-- Language switch for desktop -->
  <div class="hidden sm:block">
    <LanguageSwitch />
  </div>
	<mobile-button>
		<button
			aria-expanded="false"
			aria-haspopup="menu"
			aria-label="Open main menu"
			class="group relative ms-4 h-7 w-7 sm:invisible sm:hidden"
			id="toggle-navigation-menu"
			type="button"
		>
			<svg
				aria-hidden="true"
				class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 transition-all group-aria-expanded:scale-0 group-aria-expanded:opacity-0"
				fill="none"
				focusable="false"
				id="line-svg"
				stroke="currentColor"
				stroke-width="1.5"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path d="M3.75 9h16.5m-16.5 6.75h16.5" stroke-linecap="round" stroke-linejoin="round"></path>
			</svg>
			<svg
				aria-hidden="true"
				class="absolute start-1/2 top-1/2 h-full w-full -translate-x-1/2 -translate-y-1/2 scale-0 text-accent opacity-0 transition-all group-aria-expanded:scale-100 group-aria-expanded:opacity-100"
				class="text-accent"
				fill="none"
				focusable="false"
				id="cross-svg"
				stroke="currentColor"
				stroke-width="1.5"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"></path>
			</svg>
		</button>
	</mobile-button>
</header>

<script>
	import { toggleClass } from "@/utils";

	class MobileNavBtn extends HTMLElement {
		private headerEl: HTMLElement;
		private menuOpen: boolean;
		private mobileButtonEl: HTMLButtonElement;

		toggleMobileMenu = () => {
			toggleClass(this.headerEl, "menu-open");
			this.menuOpen = !this.menuOpen;
			this.mobileButtonEl.setAttribute("aria-expanded", this.menuOpen.toString());
		};

		constructor() {
			super();
			this.headerEl = document.getElementById("main-header")!;
			this.mobileButtonEl = this.querySelector("button") as HTMLButtonElement;
			this.menuOpen = false;

			this.mobileButtonEl.addEventListener("click", this.toggleMobileMenu);
		}
	}

	customElements.define("mobile-button", MobileNavBtn);
</script>
